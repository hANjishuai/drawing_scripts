figure_drawing <- function(){
  #01 整个B细胞的umap图####
.libPaths("~/R/4.4.1/library/")
library(Seurat)
library(ggplot2)
library(tidydr)
library(cowplot)
Annotationcolor <- c("#e04f61","#f7f398","#e07c95","#322dfd",
                     "#32e2f1","#7491b7","#8fcc4a","#91CDC8","#f2311233",
                     "#cfa560","#c2606d","#F0988C","#ed1223","#9E9E9E")
figuredata <- load("../output/04.subcell/02.cluster/1.Bcell.cluster.Rdata")

p0<-DimPlot(seuratdata, reduction = "umap",label = F, shuffle = T,pt.size = 0.1,
         group.by = "manual_L2",cols = Annotationcolor)+
  theme_dr(xlength = 0.1,
           ylength = 0.1,
           arrow = arrow(length = unit(0.1,"inches"),type="closed"))+
  theme(panel.grid = element_blank(),
        axis.title = element_text(face = 2,hjust = 0.03))+
#  annotate("rect",
#           xmin = c(-3.5,1,11.5,1.5,-2.6,4,-9,-2.1,8.5,-4.9)-.55,
#           xmax = c(-3.5,1,11.5,1.5,-2.6,4,-9,-2.1,8.5,-4.9)+.55,
#           ymin = c(4,3.7,2.3,-10.5,-6,-4,-6.7,-2,-6.45,-1)-.45,
#           ymax = c(4,3.7,2.3,-10.5,-6,-4,-6.7,-2,-6.45,-1)+.45,
#           fill = Annotationcolor ,
#           color="black" 
#           )+
#  annotate("text",
#           x = c(-3.5,1,11.5,1.5,-2.6,4,-9,-2.1,9,8.5,-4.9),
#           y = c(4,3.7,2.3,-10.5,-6,-4,-6.7,-2,-5,-7.5,-1),
#           label=c(paste0("C",seq(0,10,1))),
#           fontface=2,size=2.5
#          )+
  labs(title=" ")

p0
ggsave(p0,filename = "../output/04.subcell/03.annotation/Bcell&ASC_UMAP.pdf",
       width=5.5,height = 4.5)

seuratdata.sub <- subset(seuratdata,subset = condition=="HC")
p1 <-DimPlot(seuratdata.sub, reduction = "umap",label = F, shuffle = T,pt.size = 0.1,
               group.by = "manual_L2",cols = Annotationcolor)+
  theme_dr(xlength = 0.2,
           ylength = 0.2,
           arrow = arrow(length = unit(0.1,"inches"),type="closed"))+
  theme(legend.position = "none",
        panel.grid = element_blank(),
        axis.title = element_text(face = 2,hjust = 0.03),
        plot.title = element_text(hjust = 0.5,face = "bold",size = 9),
        plot.subtitle = element_text(hjust = 0.5,size = 8,face = "bold"))+
  labs(title="HC",subtitle = "(HC1,HC2,HC3)")
p1

seuratdata.sub <- subset(seuratdata,subset = condition=="DLE")
p2 <-DimPlot(seuratdata.sub, reduction = "umap",label = F, shuffle = T,pt.size = 0.1,
             group.by = "manual_L2",cols = Annotationcolor)+
  theme(legend.position = "none",
        axis.line = element_blank(),
        axis.ticks = element_blank(),
        axis.text = element_blank(),
        axis.title=element_blank(),
        panel.grid = element_blank(),
        plot.title = element_text(hjust = 0.5,face = "bold",size = 9),
        plot.subtitle = element_text(hjust = 0.5,size = 8,face = "bold"))+
  labs(title="DLE",subtitle = "(DLE1,DLE2,DLE3,DLE4)")
p2

seuratdata.sub <- subset(seuratdata,subset = condition=="SLE")
p3 <-DimPlot(seuratdata.sub, reduction = "umap",label = F, shuffle = T,pt.size = 0.1,
             group.by = "manual_L2",cols = Annotationcolor)+
  theme(legend.position = "none",
        axis.line = element_blank(),
        axis.ticks = element_blank(),
        axis.text = element_blank(),
        axis.title=element_blank(),
        panel.grid = element_blank(),
        plot.title = element_text(hjust = 0.5,face = "bold",size = 9),
        plot.subtitle = element_text(hjust = 0.5,size = 8,face = "bold"))+
  labs(title="SLE",subtitle = "(SLE1,SLE2,SLE3,SLE4)")
p3

p0<-plot_grid(p1,p2,p3,align = "h",nrow=1,rel_widths = c(1.2,1,1))
ggsave(plot = p0,filename = "../output/04.subcell/03.annotation/B&ASC_facet_umap.pdf",width = 7.3,height = 3.6)

  #02 整个B细胞umap图的marker图谱####
#选取要展示的marker基因
features <- c("IL4R","ITGAX","AIM2","IGKV3-20","IGHV3-30","IGHV3-23",
              "EBF1","IGLV2-14","CD19","MS4A1","SPN","CD27",
              "CD70","JCHAIN","IFIT3","IGKV3-15","ESR1","NME1")

for (i in seq(1,length(features),1)) {
  obs <- features[i]
  if (i<=length(features)-3) {
    p <- VlnPlot(seuratdata,obs,cols = Annotationcolor,
            pt.size = 0,) +
      theme(legend.position = "none",
            axis.title = element_blank(),
            axis.text.x = element_blank(),
            axis.ticks.x = element_blank(),
            axis.text.y=element_blank(),
            plot.title = element_text(size=8))
    assign(paste0("p",i),p)
  }else{
    p <- VlnPlot(seuratdata,obs,cols = c(Annotationcolor,"#ac28ac"),
                 pt.size = 0,) +
      theme(legend.position = "none",
            axis.title = element_blank(),
            axis.text.x = element_text(angle = 90,face = "bold",size=6,hjust = 1,vjust = 0.5),
            axis.text.y=element_blank(),
            plot.title = element_text(size=8)
            )
    assign(paste0("p",i),p)
  }
}
p0<-plot_grid(NULL,p1,NULL,p2,NULL,p3,
              NULL,p4, NULL,p5,NULL,p6,
              NULL,p7,NULL,p8,NULL,p9,
              NULL,p10,NULL,p11,NULL,p12,
              NULL,p13,NULL,p14,NULL,p15,
              NULL,p16,NULL,p17,NULL,p18,ncol=6,
          rel_widths = c(.3,1.5,0.1,1.5,0.1,1.5),
          rel_heights = c(1,1,1,1,1.2,1.8),align = "v",label_y = "Expression Level",
          scale = c(rep(1.2,36))
          )

ggsave(plot = p0,filename = "../output/04.subcell/03.annotation/B&ASC_viloin.pdf",
       width = 3.5,height = 4.7,dpi = 300)





  #03 pc图####
  ##03.1 首先将单细胞转为bulk(根据样本转换)####
library(FactoMineR)
library(factoextra)
library(ggplot2)
library(ggrepel)
pseudo_seu <- AggregateExpression(seuratdata, assays = "RNA", return.seurat = T, 
                                  group.by = c("orig.ident"))
pseudo_seu@meta.data$condition <- ifelse(grepl("^HC",pseudo_seu$orig.ident),"HC",
                                         ifelse(grepl("^DLE",pseudo_seu$orig.ident),"DLE","SLE")) 
pseudo_seu@meta.data$condition <- factor(pseudo_seu@meta.data$condition,levels = c("HC","DLE","SLE"))

Counts <- LayerData(pseudo_seu,assay = "RNA","counts") %>% data.frame() %>%t() 
gene.pca <- PCA(Counts, ncp = 2, scale.unit = TRUE, graph = FALSE)
#提取样本在 PCA 前两轴中的坐标
pca_sample <- data.frame(gene.pca$ind$coord[ ,1:2])
pca_sample$Sample=row.names(pca_sample)
#提取 PCA 前两轴的贡献度
pca_eig1 <- round(gene.pca$eig[1,2], 2)
pca_eig2 <- round(gene.pca$eig[2,2],2 )
group <- c(rep("HC",3),
           rep("DLE",4),
           rep("SLE",4))
orig <- gsub("\\.B$","",rownames(pca_sample))
pca_sample <- cbind(pca_sample,group,orig)
head(pca_sample)

p <- ggplot(data = pca_sample, aes(x = Dim.1, y = Dim.2)) +
  geom_point(aes(color = group), size = 2.5) + 
  geom_text(data = pca_sample[pca_sample$group=="SLE",],
            aes(label = orig),
            size = 2,
            vjust = -0.5,
            hjust = 1.5,
            fontface = "bold")+
  geom_text(data = pca_sample[pca_sample$group=="DLE",],
            aes(label = orig),
            size = 2,
            vjust = 3,
       #     hjust = 1.5,
            fontface = "bold")+
  geom_text(data = pca_sample[pca_sample$group=="HC",],
            aes(label = orig),
            size = 2,
            vjust = -2,
            hjust = -0.5,
            fontface = "bold")+
  scale_color_manual(values = c('#e8d2b3',"#2f2d54", "#BD9AAD")) +  #自定义颜色
  theme(legend.position = "none",
        panel.grid = element_blank(), 
        panel.background = element_rect(color = 'black', fill = 'transparent'), 
        legend.key = element_rect(fill = 'transparent')) +  #去除背景和网格线
  labs(x =  paste('PCA1:', pca_eig1, '%'), y = paste('PCA2:', pca_eig2, '%'), color = '')  #将 PCA 轴贡献度添加到坐标轴标题中

p
ggsave(plot = p,filename = "../output/04.subcell/B&ASC_pca.pdf",
       width = 6,height = 5,dpi = 300)


  ##03.2 首先将单细胞转为bulk(根据细胞类型转换)####
pseudo_seu <- AggregateExpression(seuratdata, assays = "RNA", return.seurat = T, 
                                  group.by = c("manual_L2"))
pseudo_seu@meta.data$manual_L2 <- factor(pseudo_seu@meta.data$manual_L2)
Counts <- LayerData(pseudo_seu,assay = "RNA","counts") %>% data.frame() %>%t() 
gene.pca <- PCA(Counts, ncp = 2, scale.unit = TRUE, graph = FALSE)
#提取样本在 PCA 前两轴中的坐标
pca_sample <- data.frame(gene.pca$ind$coord[ ,1:2])
pca_sample$Sample=row.names(pca_sample)
pca_sample$bref=sub("\\..*$","",pca_sample$Sample)
  
#提取 PCA 前两轴的贡献度
pca_eig1 <- round(gene.pca$eig[1,2], 2)
pca_eig2 <- round(gene.pca$eig[2,2],2 )
p <- ggplot(data = pca_sample, aes(x = Dim.1, y = Dim.2)) +
  geom_point(aes(color = Sample), size = 2.5) + 
  geom_text(data = pca_sample[c(1:3),],
            aes(label = bref),
            size = 2,
            vjust = 1.8,
            hjust = .5,
            fontface = "bold")+
  geom_text(data = pca_sample[c(4:6,8),],
            aes(label = bref),
            size = 2,
            vjust = -1.8,
            hjust = .5,
            fontface = "bold")+
  geom_text(data = pca_sample[c(7,9:11),],
            aes(label = bref),
            size = 2,
            vjust = 1.8,
            hjust = .5,
            fontface = "bold")+
  scale_color_manual(values = Annotationcolor) +  #自定义颜色
  theme(legend.position = c(0.01,0.99),
        legend.justification = c(0,1),
        legend.key.size = unit(0.5,"mm"),
        legend.margin = unit(0.01,"mm"),
        legend.title = element_blank(),
        panel.grid = element_blank(), 
        panel.background = element_rect(color = 'black', fill = 'transparent'), 
        legend.key = element_rect(fill = 'transparent')) +  #去除背景和网格线
  labs(x =  paste('PCA1:', pca_eig1, '%'), y = paste('PCA2:', pca_eig2, '%'), color = '')  #将 PCA 轴贡献度添加到坐标轴标题中
p
ggsave(plot=p,filename = "../output/04.subcell/B&ASC_CELLTYPE_pca.pdf",width = 4.3,height = 3.7)

  ##03.3 首先将单细胞转为bulk(根据细胞类型和样本来源转换)####
pseudo_seu <- AggregateExpression(seuratdata, assays = "RNA", return.seurat = T, 
                                  group.by = c("manual_L2","orig.ident"))
pseudo_seu@meta.data$manual_L2 <- factor(pseudo_seu@meta.data$manual_L2)
Counts <- LayerData(pseudo_seu,assay = "RNA","counts") %>% data.frame() %>%t() 
gene.pca <- PCA(Counts, ncp = 2, scale.unit = TRUE, graph = FALSE)
#提取样本在 PCA 前两轴中的坐标
pca_sample <- data.frame(gene.pca$ind$coord[ ,1:2])
pca_sample$Sample=row.names(pca_sample)
meta<-strsplit(pca_sample$Sample,"\\.*_")%>%unlist() %>%
  matrix(ncol=2,byrow=T)%>%data.frame()
pca_sample$orig=meta$X2
pca_sample$celltype=meta$X1
pca_sample$group=ifelse(startsWith(pca_sample$orig,"HC"),"HC",
                        ifelse(startsWith(pca_sample$orig,"DLE"),"DLE","SLE"))
pca_sample$group <- factor(pca_sample$group,levels = c("HC","DLE","SLE"))
pca_sample$brief<- gsub("\\..*$","",pca_sample$celltype)
#提取 PCA 前两轴的贡献度
pca_eig1 <- round(gene.pca$eig[1,2], 2)
pca_eig2 <- round(gene.pca$eig[2,2],2 )
p <- ggplot(data = pca_sample, aes(x = Dim.1, y = Dim.2)) +
  geom_point(aes(color = celltype,fill = group), size = 2.5,shape = 21) + 
#  geom_text(data = pca_sample[c(7,9:11),],
#            aes(label = bref),
#            size = 2,
#           vjust = 1.8,
#            hjust = .5,
#           fontface = "bold")+
  scale_color_manual(values = Annotationcolor) + 
  scale_fill_manual(values = c('#e8d2b3',"#2f2d54", "#BD9AAD"))+
  guides(fill=guide_legend(title = "",nrow = 1,position = "top",order = 1),
         color=guide_legend(title = "",nrow = 4,position = "bottom",order = 2,ncol = 3))+
  theme( legend.key.size = unit(0.1,"mm"),
         panel.grid = element_blank(), 
        panel.background = element_rect(color = 'black', fill = 'transparent'), 
        legend.key = element_rect(fill = 'transparent')) +  #去除背景和网格线
  labs(x =  paste('PCA1:', pca_eig1, '%'), y = paste('PCA2:', pca_eig2, '%'), color = '')  #将 PCA 轴贡献度添加到坐标轴标题中
p

p1 <- ggplot() +
  geom_point(data = pca_sample[pca_sample$group=="HC",],
             aes(x = Dim.1, y = Dim.2,fill = celltype),
             color = "#e8d2b3", size = 2.5,shape = 21) + 
    geom_text(data = pca_sample[pca_sample$group=="HC"&pca_sample$brief %in% c("C00","C02"),],
              aes(x = Dim.1, y = Dim.2,label = brief),
              size = 2,
              vjust = 1.8,
              hjust = .5,
              fontface = "bold")+
  scale_fill_manual(values = Annotationcolor) +
  theme(axis.title = element_blank(),
        plot.title = element_text(hjust = 0.5,face = "bold"),legend.position = "none",
        panel.grid = element_blank(), 
        panel.background = element_rect(color = 'black', fill = 'transparent'), 
        legend.key = element_rect(fill = 'transparent')) +  #去除背景和网格线
  labs("") +
  ggtitle("HC")
p1

p2 <- ggplot() +
  geom_point(data = pca_sample[pca_sample$group=="DLE",],
             aes(x = Dim.1, y = Dim.2,fill = celltype),
             color = "#2f2d54", size = 2.5,shape = 21) + 
  geom_text(data = pca_sample[pca_sample$group=="DLE"&pca_sample$brief %in% c("C00","C01","C02"),],
            aes(x = Dim.1, y = Dim.2,label = brief),
            size = 2,
            vjust = 1.8,
            hjust = .5,
            fontface = "bold")+
  scale_fill_manual(values = Annotationcolor) +
  theme(axis.title = element_blank(),
        plot.title = element_text(hjust = 0.5,face = "bold"),legend.position = "none",
        panel.grid = element_blank(), 
        panel.background = element_rect(color = 'black', fill = 'transparent'), 
        legend.key = element_rect(fill = 'transparent')) +  #去除背景和网格线
  labs() +
  ggtitle("DLE")
p2

p3 <- ggplot() +
  geom_point(data = pca_sample[pca_sample$group=="SLE",],
             aes(x = Dim.1, y = Dim.2,fill = celltype),
             color = "#BD9AAD", size = 2.5,shape = 21) + 
  geom_text(data = pca_sample[pca_sample$group=="SLE"&pca_sample$brief %in% c("C00","C01","C02"),],
            aes(x = Dim.1, y = Dim.2,label = brief),
            size = 2,
            vjust = 1.8,
            hjust = .5,
            fontface = "bold")+
  scale_fill_manual(values = Annotationcolor) +
  theme(axis.title = element_blank(),
        plot.title = element_text(hjust = 0.5,face = "bold"),legend.position = "none",
        panel.grid = element_blank(), 
        panel.background = element_rect(color = 'black', fill = 'transparent'), 
        legend.key = element_rect(fill = 'transparent')) +  #去除背景和网格线
  labs() +
  ggtitle("SLE")
p3
p0 <- plot_grid(p1,p2,p3,ncol = 1,scale =1)
pl <- plot_grid(p,p0,rel_widths = c(2,1))
ggsave(plot=pl,filename = "../output/04.subcell/B&ASC_cowplot_pca.pdf",width = 6.5,height = 5.1)



  #04 堆叠图####
  #05 各细胞类型的样本分布堆叠图####
#数据构建
meta <- seuratdata@meta.data %>% select(1,4,22)
meta$orig.ident <- factor(meta$orig.ident)
meta$manual_L2 <- factor(meta$manual_L2)
orig.list <- table(meta$manual_L2) %>% names() %>% factor()
plotdata<-data.frame("Group.1"=levels(meta$orig.ident) %>% as.character())

for (orig in orig.list) {
  data <-meta[meta$manual_L2==orig,]
  m <- length(data$manual_L2)
  Length <- function(x) {
    length(x)/m
  }
  n <- aggregate(x=data$manual_L2,
                 by=list(data$orig.ident),
                 function(x) { 
                   length(x)/m
                   })
  plotdata <-merge(x=plotdata,y=n,by="Group.1",all.y=T)
}

colnames(plotdata) <- c("orig",levels(seuratdata))

plotdata <- pivot_longer(data = plotdata,cols = starts_with("C"),
                         names_to = "celltype",values_to = "percentage")
plotdata$orig <- factor(plotdata$orig,c("HC1_B","HC2_B","HC3_B",
                                        "DLE1_B","DLE2_B","DLE3_B","DLE4_B",
                                        "SLE1_B","SLE2_B","SLE3_B","SLE4_B"))
write("manual_L2_number",file="../output/04.subcell/03.annotation/result/manual_L2_consitution_ration.txt")
sink(file = "../output/04.subcell/03.annotation/result/manual_L2_consitution_ration.txt",append = T);
Sys.time();
seuratdata@meta.data$manual_L2 %>% table();
print("构成比");
plotdata[,c(10,11)];
print("每个细胞类型的样本构成比csv文件：each_cellltype_ratio.csv")
sink()
write.csv(plotdata,file = "../output/04.subcell/03.annotation/result/each_cellltype_ratio.csv")

p<-ggplot(data = plotdata,aes(x=celltype,y=percentage))+
  geom_col(aes(fill = orig),position = "fill")+
  scale_fill_manual(name=" ",values = c("#2171B5","#08519C","#08306B",
                               "#FFFFCC","#FFEDA0","#FED976","#FEB24C",
                               "#D4B9DA","#C994C7","#980043","#67001F"))+
  theme_classic()+
  theme(axis.text.x = element_text(angle = 45,vjust = 1,hjust = 1,face = "bold"),
        axis.title.y = element_text(face = "bold"))+
  xlab("")+
  ylab("Percent of cells(%)")
ggsave(plot = p,filename = "../output/04.subcell/B&ASC_STACKplot_bycelltype.pdf",
       width = 5,height = 4)



  #06 各样本类型的细胞类型堆叠图####
#数据构建
meta <- seuratdata@meta.data %>% select(1,4,22)
meta$orig.ident <- factor(meta$orig.ident)
meta$manual_L2 <- factor(meta$manual_L2)
orig.list <- table(meta$orig.ident) %>% names() %>% factor(levels=c("HC1_B","HC2_B","HC3_B",
                                                                    "DLE1_B","DLE2_B","DLE3_B","DLE4_B",
                                                                    "SLE1_B","SLE2_B","SLE3_B","SLE4_B"))
plotdata<-data.frame("Group.1"=levels(meta$manual_L2) %>% as.character())

for (orig in orig.list) {
  data <-meta[meta$orig.ident==orig,]
  m <- length(data$orig.ident)
  Length <- function(x) {
    length(x)/m
  }
  n <- aggregate(x=data$orig.ident,
                 by=list(data$manual_L2),
                 function(x) { 
                   length(x)/m
                 })
  plotdata <-merge(x=plotdata,y=n,by="Group.1",all.y=T)
}

colnames(plotdata) <- c("celltype",levels(orig.list))
write("cell_number_byorig",file = "../output/04.subcell/03.annotation/result/orig_ident_ratio.txt")
sink(file = "../output/04.subcell/03.annotation/result/orig_ident_ratio.txt",append = T)
seuratdata$orig.ident %>% table()
print("具体各种细胞类型所占该样本百分比文件：each_orig_ratio.csv");sink()
write.csv(plotdata,file = "../output/04.subcell/03.annotation/result/each_orig_ratio.csv")

plotdata <- pivot_longer(data = plotdata,cols = ends_with("B"),
                         names_to = "orig",values_to = "percentage")
plotdata$orig <- factor(plotdata$orig,c("HC1_B","HC2_B","HC3_B",
                                        "DLE1_B","DLE2_B","DLE3_B","DLE4_B",
                                        "SLE1_B","SLE2_B","SLE3_B","SLE4_B"))
p <-ggplot(data = plotdata,aes(x=orig,y=percentage))+
  geom_col(aes(fill = celltype),position = "fill")+
  scale_fill_manual(name=" ",values = Annotationcolor)+
  theme_classic()+
  theme(axis.text.x = element_text(angle = 45,vjust = 1,hjust = 1,face = "bold"),
        axis.title.y = element_text(face = "bold"))+
  xlab("")+
  ylab("Percent of cells(%)")

ggsave(plot = p,filename = "../output/04.subcell/03.annotation/B&ASC_STACKplot_byorig.pdf",
       width = 4.3,height = 4)

  #07 通路富集热图 ####
library(ComplexHeatmap)
library(circlize)
library(paletteer)
library(tidyr)
library(cowplot)
library(ggplotify)
library(tibble)
common_pathway <- read.csv("../output/07.enrichment/common_up_df_among_condition_anno.csv")
#common_pathway$Description <- factor(common_pathway$Description)
#转变为宽数据

df <- pivot_wider(common_pathway[,c(3,4,5)],
                  names_from = condtion,values_from = Count) 


#取出对应的注释
df$Annotation<- common_pathway[match(df$Description,
                                     common_pathway[common_pathway$condtion=="DLE",]$Description),]$Annotation 
df$Annotation <- factor(df$Annotation,
                        levels = c("A","B","C","D","E","O"),
                        labels = c("Tc","Bc",
                                   "Cytokine","APC",
                                   "Chemotaxis","Others"))
df <- df %>% arrange(.,df$Annotation)

#热图一定要设置行名(后面可以注释掉)
df <- column_to_rownames(df,var="Description")

#df <-scale(df)
  x
#设置counts图例
counts_leg <- Legend(col_fun=col_fun,title="Counts")
if(!dir.exists("../output/07.enrichment/heatmapcomponents/")){
  dir.create("../output/07.enrichment/heatmapcomponents/")
}
pdf("../output/07.enrichment/heatmapcomponents/common_up/Legend.pdf")
draw(counts_leg)
dev.off()

#设置注释bar
barnumber <- df$Annotation 
#设置注释颜色
col_anno <- as.character(paletteer_d("ggsci::default_igv",n=6))
#df$Annotation %>% table()
col_anno<- rep(col_anno,c(0,4,2,8,0,2),each=T)
names(col_anno) <- barnumber
left_anno <- rowAnnotation(Module=df$Annotation,
                  col=list(Module=col_anno),
                  border = F,
                  show_annotation_name = F,
                  annotation_legend_param = list(title="",labels=""),
                  show_legend = F
                  )

#热图主题设置#热图主col_fun题设置
df0 <- df[,-4] %>% dplyr::select("HC","DLE","SLE")
pdf("../output/07.enrichment/heatmapcomponents/common_up/heatmap.pdf",
    width = 1.5,
    height = 10)
p0 <- Heatmap(df0,
        cluster_columns = F,
        cluster_rows = F,
        show_row_names = F,
        col = col_fun,
        show_heatmap_legend = F,
        border = F,
        gap = unit(1, "mm"),
        rect_gp = gpar(col="white",lwd=1),
        column_names_gp = gpar(fontface="bold",fontsize=5.5),
        column_names_centered = T,
        column_names_rot = 0,
        left_annotation = left_anno,
        split = df$Annotation,
        row_title_rot = 90,
        column_title_rot = 0,
        row_title_gp = gpar(fontsize=10,fontface="bold"))
p0
dev.off()

#条形柱状图
df2 <- common_pathway[,c(3:5)]#read_csv和read.csv的区别
#df2$Description[c(9,69,102)] <- "immunoglobulin superfamily domains"
#df2$Description[c(44,79,138)] <- "antigen processing and presentation of endogenous peptide"

#这里记得重新运行467-474
df$Description <- factor(df$Description,levels = df$Description
                        # ,labels = mm[[1]]
                         )
df2$Description <- factor(df2$Description,levels = rev(levels(df$Description)))
df2$condtion <- factor(df2$condtion,levels = rev(c("HC","DLE","SLE")))

pdf("../output/07.enrichment/heatmapcomponents/common_up/barplot.pdf",
    height = 10)
p1<- ggplot(df2) +
  geom_col(mapping = aes(x=Description,y=Count,fill = condtion),
           position = "stack",width = 0.8,)+
  theme_bw()+
  scale_fill_manual(name="",values = rev(c('#e8d2b3',"#2f2d54", "#BD9AAD")))+
  theme(axis.title.y = element_blank(),
        axis.text.x = element_text(angle = 0,),
        axis.title.x = element_text(face="bold"),
        panel.grid.major = element_blank(),
        axis.text.y = element_text(size = 6,face = "bold",hjust = 0),
        axis.ticks = element_blank(),
        legend.position = c(.99,0.55),
        legend.justification = c(1,1),
        legend.key.size = unit(10,"mm"),
        legend.text = element_text(size=5,face="bold"),
        legend.box.background = element_rect(inherit.blank = T)
        )+
  scale_y_continuous(expand=c(0,0))+
  coord_flip()
p1
dev.off()

pdf("../output/07.enrichment/heatmapcomponents/common_up/cowplot.pdf",width = 10,height = 8)
plot_grid(as.ggplot(p0),p1,NULL,rel_widths = c(1.2,7,5),nrow = 1)
dev.off()

  #08 通路富集热图关键基因热图####
common_pathway <- read.csv("../output/07.enrichment/common_up_df_among_condition_anno.csv")
#选取含基因和注释的表格
select_df <- common_pathway %>% filter(condtion=="DLE") %>% dplyr::select(5:6)
#依据注释，合并相同注释的基因，并进行功能注释总结，设为因子
select_df2 <- aggregate(select_df$geneID,
                        list(select_df$Annotation),
                        FUN = function(x){paste(x,collapse = "/")}) %>%
  dplyr::rename(genelist=x,anno=`Group.1`) %>% mutate(fun_anno=c("Tc","Bc",
                                                          "Cytokine","Chemotaxis","Others"))
select_df2$fun_anno <- factor(select_df2$fun_anno,levels = c("Tc","Bc",
                                                            "Cytokine","Chemotaxis","Others") )
#将基因字符串拆分，并创建其矩阵
#先是用aggregate函数，分组进行函数操作（分离字符串），得到每个组的基因list
genematrix_list <- aggregate(select_df2$genelist,list(select_df2$fun_anno),function(x){
  str_split(x,pattern = "/",simplify = T) %>% t() %>%
    matrix(ncol = 1)  
})
#对list向量，进行lapply unique操作，并注明是什么功能
genematrix_list2 <- lapply(genematrix_list$x, unique)
names(genematrix_list2) <- levels(select_df2$fun_anno )

genematrix_df <- unlist(genematrix_list2) %>% data.frame() %>% 
  dplyr::rename(.,gene=`.`) %>% rownames_to_column(var = "anno")
genematrix_df$anno <- gsub("[0-9]$","",genematrix_df$anno)
genematrix_df$anno <- gsub("[0-9]$","",genematrix_df$anno)
genematrix_df$anno <- factor(genematrix_df$anno,levels = c("Tc","Bc",
                                        "Cytokine","Chemotaxis","Others"))
write.csv(genematrix_df,
          "../output/07.enrichment/heatmapcomponents/common_up/exact_gene_heatmap_list.csv")

#构建数据矩阵
library(Seurat)
library(tibble)
celldata=load(paste0("../output/01HC-DLE-SLE_blood-result/04.subcell/02.cluster/1.CD79A_Bcell.cluster.Rdata") )
seuratdata <- subset(seuratdata,subset = manual_L2=="C08_Bc_CD5+")
#获取按照一定顺序（condition，celltype）的细胞名
metadata <- seuratdata@meta.data  %>% 
  rownames_to_column("cellid") %>% 
  mutate(condition=factor(condition,levels=c("HC","DLE","SLE"))) %>% 
  arrange(.,condition) 
#  %>%
#  group_by(condition) %>% 
#  arrange(.,manual_L2) 
cellid <- metadata$cellid

#获取想看的基因集
genematrix_df <- read_csv("../output/07.enrichment/heatmapcomponents/common_up/exact_gene_heatmap_list.csv")
genematrix_df <- genematrix_df[,-1]
genematrix_df$anno <- factor(genematrix_df$anno,levels = c("Tc","Bc",
                                                           "Cytokine","Chemotaxis","Others"))
write_csv(genematrix_df,"../output/07.enrichment/heatmapcomponents/common_up/gene_annotated.csv")

#因为不同功能的基因集有着重复的基因，所以我们得构建列表数据
express_df <- LayerData(seuratdata,assay = "SCT",layer = "data")
#按照上面的顺序，重置基因矩阵列顺序
express_df <- express_df[,match(cellid,colnames(express_df))]

matrix_list <-list()
for (annota in levels(genematrix_df$anno)) {
  #确定基因集
  genelist <- genematrix_df %>% 
    filter(genematrix_df$anno==annota) %>% 
    dplyr::select("gene") %>% data.frame()
  express_df_sub <- express_df[match(genelist$gene,rownames(express_df)),]
  assign(annota,express_df_sub)
  matrix_list[[annota]] <- get(annota)
}
#终于可以作图了
df <- Reduce("rbind",matrix_list) %>% as.matrix() 

#设置颜色：
col_fun <- colorRamp2(c(0,4),c("#1a1c11","#f5ef64"))
#设置geneexpression图例
geneexpression_leg <- Legend(col_fun=col_fun,
                             title="Expression",
                             at = c(0,2,4),title_position = "topcenter",
                             direction = "horizontal",legend_width = unit(15,"mm"),
                             title_gp = gpar(fontsize=8,fontface="bold"))
pdf("../output/07.enrichment/heatmapcomponents/common_up/Legend_geneexpression.pdf",width = )
draw(geneexpression_leg)
dev.off()


#设置注释rowbar
barnumber <- genematrix_df$anno
#设置注释rowbar颜色
col_anno <- as.character(paletteer_d("ggsci::default_igv",n=5))#n是注释有n种
#genematrix_df$anno %>% table() #查看每个注释的数量
col_anno<- rep(col_anno,c(50,15,50,32,46),each=T)
names(col_anno) <- barnumber
left_anno <- rowAnnotation(Module=genematrix_df$anno,
                           col=list(Module=col_anno),
                           border = F,
                           show_annotation_name = F,
                           annotation_legend_param = list(title="",title_position = "topcenter",
                                                          title_gp = gpar(fontsize=8,fontface="bold")),
                           show_legend = T
)

#设置注释colbar
colbarnumber <- metadata$condition %>% factor(.,levels=c("HC","DLE","SLE"))
#设置颜色
col_anno2 <- as.character(c('#e8d2b3',"#2f2d54", "#BD9AAD"))
#metadata$condition %>% table()
col_anno2<- rep(col_anno2,c(240,192,331),each=T)
names(col_anno2) <- colbarnumber
top_anno <- HeatmapAnnotation(Module=metadata$condition,
                           col=list(Module=col_anno2),
                           border = F,
                           show_annotation_name = F,
                           annotation_legend_param = list(title="",
                                                          title_position = "topcenter",
                                                          title_gp = gpar(fontsize=8,fontface="bold")),
                           show_legend = T
)


pdf("../output/07.enrichment/heatmapcomponents/common_up/heatmap_gene.pdf",width = 10,height = 7)
Heatmap(df,
        cluster_columns = F,
        cluster_rows = F,
        show_row_names = F,
        show_column_names = F,
        col = col_fun,
        split = genematrix_df$anno,
        left_annotation = left_anno,
        top_annotation = top_anno,
        row_title_gp = gpar(fontsize=7,fontface="bold"),
        show_heatmap_legend = T,
        column_split = metadata$condition,
        column_title_gp = gpar(fontsize=7,fontface="bold"),
        heatmap_legend_param = list(title=""
                                    #legend_direction = "horizontal",title_position = "topcenter"
                                    )) 
dev.off()





  

  #09 pyscenic可视化####
#环境设置
inputpath <- '../output/04.subcell/04.pyscenic/'

#加载包
library(SCopeLoomR)
library(cowplot)
#dyn.load('/home/jifanghan/miniconda3/lib/libhdf5_hl.so.200.0.1')
library(AUCell)
library(SCENIC)
#可视化相关包，多加载点没毛病
library(dplyr)
library(KernSmooth)
library(RColorBrewer)
library(plotly)
library(BiocParallel)
library(grid)
library(ComplexHeatmap)
library(data.table)
library(ggplot2)
library(pheatmap)
#devtools::install_github("XiaoLuo-boy/ggheatmap")
library(ggheatmap)
library(reshape2)

##读取pyscenic第三步分析的文件sce_SCENIC.loom
sce_SCENIC <- open_loom(paste0(inputpath,"sce_SCENIC.loom"))
# exprMat <- get_dgem(sce_SCENIC)#从sce_SCENIC文件提取表达矩阵
# exprMat_log <- log2(exprMat+1) # log处理
#这里的表达矩阵其实就是我们在pyscenic分析第一步的输入矩阵，可见这些文件都是在一起的

regulons_incidMat <- get_regulons(sce_SCENIC, column.attr.name="Regulons")
#提取第二步分析的regulons,column.attr.name填Regulons，具体按照实际情况提示选择
#也就是我们所输入的基因和找到的转录因子组成的表达文件

regulons <- regulonsToGeneLists(regulons_incidMat)#将上一步矩阵文件转化为list
class(regulons)

#提取pyscenic第三步分析中AUC结果
regulonAUC <- get_regulons_AUC(sce_SCENIC, column.attr.name='RegulonsAUC')
regulonAucThresholds <- get_regulon_thresholds(sce_SCENIC)

#以上就是一些主要文件了、够后续分析和可视化
##==============================加载seurat对象、RSS分析=========================
#在可视化之前，我们再做一个分析，计算RSS值，计算regulon特异性评分
load('../output/04.subcell/02.cluster/1.Bcell.cluster.Rdata')
cellinfo<-seuratdata@meta.data[,c('manual_L2','condition',"nFeature_RNA","nCount_RNA")]#细胞meta信息
colnames(cellinfo)=c('celltype', 'group','nGene' ,'nUMI')

######计算细胞特异性TF
#在实际数据分析应用中，我认为比较靠谱的应用在于，细胞分了亚群，例如macrophage，有不同的特征
#我们可以查看不同亚群特异性的TF，有助于了解亚群的功能！！！！
cellTypes <-  as.data.frame(subset(cellinfo,select = 'celltype'))
selectedResolution <- "celltype"
sub_regulonAUC <- regulonAUC

rss <- calcRSS(AUC=getAUC(sub_regulonAUC),#从aucellresults获取AUC矩阵
               cellAnnotation=cellTypes[colnames(sub_regulonAUC),
                                        selectedResolution])
rss <- rss[,levels(seuratdata$manual_L2)]
write.csv(rss,file = '../output/04.subcell/04.pyscenic/rss_all.csv')
rss_activate <- rss[grepl("\\+",rownames(rss)),]
write.csv(rss_activate,file = '../output/04.subcell/04.pyscenic/rss_activate.csv')
rss_inactivate <- rss[grepl("\\-",rownames(rss)),]
write.csv(rss_inactivate,file = '../output/04.subcell/04.pyscenic/rss_inactivate.csv')
rss=na.omit(rss)#去除含有NA的行

#可视化细胞特异性TF气泡图,这个是反映regulon的特异性的
pdf('../output/04.subcell/04.pyscenic/TF_rss_droplot.pdf',
    width = 3.5,height = 5.5)
rssPlot <- 

    plotRSS(
    rss,
    zThreshold = 3,
    cluster_columns = FALSE,
    order_rows = TRUE,
    thr=0.1,
    varName = "cellType",
    col.low = '#330066',
    col.mid = '#66CC66',
    col.high = '#FFCC33')
rssPlot
dev.off()

#提取数据，可以自己可视化dotplot，或者热图，这个是反映TF的表达量的
rss_data <- rssPlot$plot$data
write.csv(rss_data,'../output/04.subcell/04.pyscenic/rss_dotplot.csv')
rss_data<-dcast(rss_data, 
                Topic~rss_data$cellType,
                value.var = 'Z')
rownames(rss_data) <- rss_data[,1]
rss_data <- rss_data[,-1]
colnames(rss_data)
if(T){
  col_ann <- data.frame(Celltypes= colnames(rss_data))#列注释
  rownames(col_ann) <- colnames(rss_data)
  groupcol <- c("#e04f61","#f7f398","#e07c95","#322dfd",
                "#32e2f1","#7491b7","#8fcc4a","#91CDC8","#f2311233",
                "#cfa560","#c2606d","#F0988C","#ed1223","#9E9E9E")
  names(groupcol) <- colnames(rss_data)
  col <- list(Celltypes=groupcol)
}

#text_columns <- sample(colnames(rss_data),0)#不显示列名
pdf('../output/04.subcell/04.pyscenic/heatmap_TF.pdf',width = 4.6,height = 6.5)
p <- ggheatmap(rss_data,
               color=colorRampPalette(c('#91CDC8','white',"#F0988C"))(100),
               cluster_rows = F,
               cluster_cols = F,
               scale = "row",
               annotation_cols = col_ann,
               annotation_color = col,
               legendName="Relative value",,
             #  shape = 'circle',
               border = T) %>% 
  ggheatmap_theme(1,theme =list(
                 theme(axis.text.x = element_text(angle = 90,face = "bold",
                                                  vjust =1,hjust = 0.8))
               ))
p
dev.off()

##==============================TF_AUC与seurat结合===========================
#普通展示

next_regulonAUC <- regulonAUC[,match(colnames(seuratdata),colnames(regulonAUC))]
dim(next_regulonAUC)#将AUC结果于seurat对象结合
regulon_AUC <- regulonAUC@NAMES
seuratdata@meta.data = cbind(seuratdata@meta.data,
                             t(assay(next_regulonAUC[regulon_AUC,])))

#自己选定感兴趣的或者比较重要的转录因子（也是显示TF的表达量的）
TF_plot <- rownames(rss_data)
pdf('../output/04.subcell/04.pyscenic/TF_express_Dotplot.pdf',width = 7,height = 6)
DotPlot(seuratdata, features = TF_plot)+
  theme_bw()+
  theme(panel.grid = element_blank(), 
        axis.text.x=element_text(size = 8,face = "bold",hjust =1,vjust=1, angle = 90))+
  labs(x=NULL,y=NULL)+
  guides(size=guide_legend(order=3))+
  coord_flip()
dev.off()
####各疾病状态下，转录因子特征改变
pdf('../output/04.subcell/04.pyscenic/TF_profile_condition.pdf',width = 7,height = 3)
DotPlot(seuratdata, features = TF_plot, group.by = 'condition')+
  theme_bw()+
  theme(panel.grid = element_blank(), 
        axis.text.x=element_text(hjust =1,vjust=1, angle = 45))+
  theme(legend.direction = "horizontal", 
        legend.position = "bottom")+
  labs(x=NULL,y=NULL)
dev.off()

####各疾病状态下，B1细胞转录因子特征改变
pdf('../output/04.subcell/04.pyscenic/B1_TF_profile_condition.pdf',width = 7,height = 3)
DotPlot(B1, features = TF_plot, group.by = 'condition')+
  theme_bw()+
  theme(panel.grid = element_blank(), 
        axis.text.x=element_text(hjust =1,vjust=1, angle = 45))+
  theme(legend.direction = "horizontal", 
        legend.position = "bottom")+
  labs(x=NULL,y=NULL)
dev.off()
####特定TF的表达特征
pdf('../output/04.subcell/04.pyscenic/special_TF_umap.pdf',width = 6,height = 2.6)
p <- FeaturePlot(seuratdata,c('TCF7','GATA3'))
p
dev.off()

pdf('../output/04.subcell/04.pyscenic/special_TF_umap_withsymbol.pdf',width = 6,height = 2.6)
p<-FeaturePlot(seuratdata, features =c('TCF7(+)','GATA3(-)'))
p
dev.off()

#制作统计需要的表格
load('../output/04.subcell/02.cluster/1.Bcell.cluster.Rdata')
seuratdata$mix <- paste0(seuratdata$orig.ident,seuratdata$manual_L2)
Idents(seuratdata) <- "mix" 
expr <- AggregateExpression(seuratdata, assays = "SCT", slot = "data")[[1]]
expr <- expr[rowSums(expr)>0,]  #过滤细胞表达量全为零的基因
expr <-as.data.frame(expr) 
expr_percent<- apply(expr,2,function(x){x/sum(x)*10e6})
expr_percent[c('TCF7','GATA3'),]
write.csv(expr_percent,'../output/04.subcell/04.pyscenic/orig_ident_express.csv',)
sink('../output/04.subcell/04.pyscenic/tf_express_matrix.txt',append = F);
print('方便我作TCF7,GATA3');
expr_percent[c('TCF7','GATA3'),];sink()
#==============================TF平均表达活性===========================

cellsPerGroup <- split(rownames(cellTypes), 
                       cellTypes[,selectedResolution])
#计算平均表达
regulonActivity_byGroup <- sapply(cellsPerGroup,
                                  function(cells) 
                                    rowMeans(getAUC(sub_regulonAUC)[,cells]))

#scale处理\类似于热图数据的标准化
regulonActivity_byGroup_Scaled <- t(scale(t(regulonActivity_byGroup),
                                          center = T, scale=T)) 
aa <- data.frame('07_B1_SPN+'=regulonActivity_byGroup_Scaled[,'07_B1_SPN+'])  
aa <- aa %>% arrange(desc(aa$X07_B1_SPN.))
sink('../output/04.subcell/04.pyscenic/allcelltype_TFlists.text',append = F)
aa;sink()
 

regulonActivity_byGroup_Scaled<-na.omit(regulonActivity_byGroup_Scaled) %>% data.frame()
re <- rownames_to_column(regulonActivity_byGroup_Scaled,var='gene')

#anno_mark()至少需要两个参数，其中at是原始数据矩阵的索引，标签是对应的文本。
index <-c(c(222,256,48,132,193,200,83),#B1
          c(15,51,53,265,192),#Bn
          c(65,42,119,131,196),#Bm
          c(24,7,239,35,8)#Plasma
          )
mark <- rownames(regulonActivity_byGroup_Scaled)[index] 
mark <-  gsub('\\(.*\\)','',mark)
lab = rowAnnotation(ano = anno_mark(at = index,
                                    labels = mark,
                                    labels_gp = gpar(fontsize = 8)))
pdf('../output/04.subcell/04.pyscenic/tf_topn_heatmap.pdf',width = 3,height = 7)
hm <- draw(ComplexHeatmap::Heatmap(regulonActivity_byGroup_Scaled, 
                                   name="Regulon activity",show_heatmap_legend = F,
                                   cluster_rows = T,
                                   show_row_dend = F,
                                   cluster_columns = F,
                                   column_names_gp = grid::gpar(fontsize=5),
                                   show_row_names = F,
                                   right_annotation = lab)) 
dev.off()

#------rank可视化rss-----------------------------------------------------
B_rss <- as.data.frame(rss)#rss特异性TF结果
#需要作图的细胞类型
celltype <- c("00_Bn_IL4R+","01_AtMB_ITGAX+","08_Plasma_JCHAIN+","07_B1_SPN+")
rssRanklist <- list()

for(i in 1:length(celltype)) {
  
  data_rank_plot <- cbind(as.data.frame(rownames(B_rss)),
                          as.data.frame(B_rss[,celltype[i]]))#提取数据
  
  colnames(data_rank_plot) <- c("TF", "celltype")
  data_rank_plot=na.omit(data_rank_plot)#去除NA
  data_rank_plot <- data_rank_plot[order(data_rank_plot$celltype,decreasing=T),]#降序排列
  data_rank_plot$rank <- seq(1, nrow(data_rank_plot))#添加排序
  
  p <- ggplot(data_rank_plot, aes(x=rank, y=celltype)) + 
    geom_point(size=1, shape=16, color="#1F77B4",alpha =0.4)+
    geom_point(data = data_rank_plot[1:6,],
               size=1, color='#DC050C')+ #选择前6个标记，自行按照需求选择
    theme_bw()+
    theme(axis.title = element_text(colour = 'black', size = 12),
          axis.text = element_text(colour = 'black', size = 10),
          axis.text.x = element_blank(),
          axis.ticks.x = element_blank())+
    labs(x='Regulons Rank', y='Specificity Score',title =celltype[i])+
    geom_text_repel(data= data_rank_plot[1:6,],max.overlaps =15 ,
                    aes(label=TF), color="black", size=3.5, fontface="italic", 
                    arrow = arrow(ends="first", length = unit(0.01, "npc")), box.padding = 0.2,
                    point.padding = 0.3, segment.color = 'black', 
                    segment.size = 0.3, force = 1, max.iter = 3e3)
  rssRanklist[[i]] <- p
}
pdf('../output/04.subcell/04.pyscenic/rss_rank_plot.pdf',width = 8.5,height = 5)
plot_grid(rssRanklist[[1]],rssRanklist[[2]],rssRanklist[[3]],
          rssRanklist[[4]],ncol=2)
dev.off()

if(F){
#pySCENIC的差异分析及其他思路(后面再补)
#加载R包
library(limma)
library(SCENIC)
library(AUCell)
library(data.table)
anaAUC <- regulonAUC
anaAUC <- anaAUC[onlyNonDuplicatedExtended(rownames(anaAUC)),]
ana.cellinfo<-seuratdata@meta.data#细胞信息

#选取需要分析的细胞
for (i in levels(seuratdata)) {
  cell.cellinfo <- subset(ana.cellinfo, ana.cellinfo$manual_L2==i)
  targets<-data.table(FileName=rownames(cell.cellinfo),Target=cell.cellinfo$group)#提取组合分组
  
}
}#下周搞

#pySCENIC转录因子与靶基因
#我们还可以可视化感兴趣的TF调控的靶基因
#TF与靶基因的关系在pyscenic分析得到的第二个文件
sce_regulons <- read.csv("../output/04.subcell/04.pyscenic/sce.regulons.csv")
sce_regulons <- sce_regulons[-2, ]
colnames(sce_regulons) <- sce_regulons[1,]
sce_regulons <- sce_regulons[-1, ]
colnames(sce_regulons) <- c("TF","ID","AUC","NES","MotifSimilarityQvalue","OrthologousIdentity",
                            "Annotation","Context","TargetGenes","RankAtMax")

#举例子我这里关注TCF7和GATA3这两个TF
find_TF<-function(tf,AUC_thresholds=0.1){
  library(stringr)
  TF_SET <- subset(sce_regulons, TF==tf) %>% 
    filter(AUC>AUC_thresholds) %>% 
    select(c("TF","TargetGenes"))
  TF_SET$TargetGenes <-gsub("\\[","",TF_SET$TargetGenes)
  TF_SET$TargetGenes <-gsub("\\]","",TF_SET$TargetGenes)
  TF_SET$TargetGenes <-gsub("\\(","",TF_SET$TargetGenes)
  TF_SET$TargetGenes <-gsub("\\)","",TF_SET$TargetGenes)
  TF_SET$TargetGenes <-gsub("\\'","",TF_SET$TargetGenes)
  split_TF<-str_split(TF_SET$TargetGenes,",")
  tf_list <- lapply(split_TF,function(x){
    df<-as.data.frame(x)
    names(df)<-'TF'
    return(df)
  })
  tf_df <- purrr::reduce(tf_list,rbind)
  tf_target <- tf_df[seq(1,nrow(tf_df),2), ]
  tf_score <- tf_df[seq(0,nrow(tf_df),2), ]
  tf_gene <- data.frame(tf_target,tf_score)
  tf_gene <- tf_gene[!duplicated(tf_gene$tf_target), ]
  tf_gene$gene <- tf
  colnames(tf_gene) <- c("target","score",'tf')
  return(tf_gene)
}

tcf7 <- find_TF('TCF7')
gata3 <- find_TF('GATA3',AUC_thresholds = 0.05)

TF_target <- rbind(tcf7,gata3)
TF_target$score <- as.numeric(TF_target$score)
write_csv(TF_target,'../output/04.subcell/04.pyscenic/TF_target.csv')
#网络图
library(ggraph)
library(tidygraph)

TF_target<-read_csv('../output/04.subcell/04.pyscenic/TF_target.csv')
#节点数据
paths <- c('TCF7', 'GATA3')#列重命名
nodelist <- list()
#提取每个大节点数据
for (i in 1:length(paths)){
  node <- subset(TF_target, tf == paths[i])#提取数据
  nodes <- data.frame(name = unique(union(node$tf, node$target)))#整理为datafram
  nodes$value <- c(sum(node$score)/10, 
                   unique(node$score[-which(node$target==unique(node$tf))]))#加上values
  nodes$cluster <- paste0(paths[i],'_regulon')
  nodelist[[i]] <- nodes
} 
nodes <- purrr::reduce(nodelist,rbind)

#边缘文件
edges <- TF_target[c("tf","target","score")]
edges$class <- edges$tf

#构建ggraph作图文件
layout_cir <- tbl_graph(nodes = nodes, edges = edges)

#作图
ggraph(layout_cir,layout='linear',circular = TRUE) +#选择circle
  geom_node_point(aes(size=value,colour = cluster))+#节点，大小用我们赋的值表示，颜色用分组
  geom_node_text(aes(x = 1.05 * x,
                     y = 1.05 * y,
                     label=name,
                     color=cluster,
                     angle = -((-node_angle(x, y) + 90) %% 180) + 90),
                 size = 2,
                 hjust='outward') +#文字设置。x，y是为了调整位置。angle是为了调整角度，以后其他所有网络图angle都用此公式，文字会向外发散排列
  geom_edge_arc(aes(colour=class))+#连线为曲线
  theme_void()+#theme主题
  theme(legend.position = "none")+
  scale_colour_manual(values =c('#407972',
                                '#961E28',
                                '#D46724',
                                '#0f8096'))+#节点颜色
  scale_edge_colour_manual(values = c("#9E9E9E",
                                      "#ed1223",
                                      '#0f8096'))+#连线颜色
  scale_size_continuous(range = c(1,4))+#点的大小范围设置
  coord_cartesian(xlim=c(-1.5,1.5),ylim = c(-1.5,1.5))#设置坐标位置，防止图溢出作图边界显示不全
  ggsave('../output/04.subcell/04.pyscenic/circle_tf_netplot.pdf',width = 6.3,height = 6.8)
  
  
  
  
  
  
  
  
#10 scRepertoire可視化####
#isotype umapt图
.libPaths("~/R/4.4.1/library/")
library(Seurat)
library(ggplot2)
library(tidydr)
library(cowplot)
Annotationcolor <- c("#e04f61","#f7f398","#e07c95",
                     "#32e2f1","#7491b7","#8fcc4a",
                     "#cfa560","#c2606d","#9E9E9E","#9E9E9E")
figuredata <- load("../output/04.subcell/02.cluster/scBCR.RData")

p0<-DimPlot(scBCR_RNA, reduction = "umap",label = F, shuffle = T,pt.size = 0.1,
            group.by = "Isotype",cols = Annotationcolor)+
  theme_dr(xlength = 0.1,
           ylength = 0.1,
           arrow = arrow(length = unit(0.1,"inches"),type="closed"))+
  theme(panel.grid = element_blank(),
        axis.title = element_text(face = 2,hjust = 0.03))+
  labs(title=" ")

p0
ggsave(p0,filename = "../output/04.subcell/05.scRepertoire/isotype_UMAP.pdf",
       width=5,height = 4)
#空心饼图，显示不同细胞亚群的免疫组谱
library(ggplot2)
library(ggforce)
piedata <- read.csv("../output/04.subcell/05.scRepertoire/mix_celltype_isotype.csv")
piedata <- piedata[which(!is.na(piedata$X)),] 
rownames(piedata) <- piedata$X
piedata <- piedata[,-1]
for (i in seq_along(colnames(piedata))) {
  data <- piedata[,i] %>% data.frame()
  colnames(data) <-colnames(piedata[i])
  rownames(data) <-rownames(piedata)
  ggplot()+
    geom_arc_bar(data=data,
                 stat = "pie",
                 aes(x0=0,y0=0,r0=1,r=2,
                     amount=data[,1],fill=rownames(data)))+
    theme(panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(),
          axis.ticks = element_blank(), 
          axis.text.y = element_blank(),
          axis.text.x = element_blank(),
          legend.title=element_blank(), 
          panel.border = element_blank(),
          panel.background = element_blank())+#去除没用的ggplot背景，坐标轴
    xlab("")+ylab('')+#添加颜色
    scale_fill_manual(values = c('#E5D2DD', '#53A85F', '#F1BB72', '#F3B1A0', 
                                 '#D6E7A3', '#57C3F3', '#476D87',
                                 '#E59CC4', 'grey'))+
    annotate("text",x=0,y=0,label=colnames(data),,angle=0)
  ggsave(paste0('../output/04.subcell/05.scRepertoire/',colnames(data),".pdf"),
         width = 6,height = 5.5)
}





}
